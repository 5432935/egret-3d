#extension GL_OES_standard_derivatives:enable

precision highp float;

uniform mat4 uniform_ViewMatrix;
uniform sampler2D albedoTex; 
uniform sampler2D normalTex; 
uniform sampler2D glossTex; 
uniform sampler2D specularTex; 

 vec3 u_lightColor = vec3(1.0,1.0,1.0);
 vec3 u_lightDir = vec3(0.0,-1.0,0.0);
 vec3 u_lightPos = vec3(0.0,-1000.0,0.0);
 vec3 u_viewPos= vec3(0.0,0.0,1.0);
 vec3 u_diffuseColor= vec3(0.8,0.8,0.8);
 float u_roughness = 0.01 ; 
 float u_fresnel = 1.6 ;
 float u_alpha = 1.0 ;
 vec3 u_ambientColor= vec3(0.2,0.2,0.2);
 float u_time = 1.0 ;
 vec3 vViewPosition = vec3(0.0,0.0,1.0);
//uniform samplerCube u_tCube;

// 			varying vec4 vPosition;
// 			varying vec3 vViewPosition;
// 			varying vec4 vNormal;
// 			varying vec3 vViewNormal;
// 			varying vec2 vUv;

varying vec4 varying_mvPose; 
varying vec3 varying_eyeNormal; 
varying vec2 varying_uv0; 
mat4 transpose(mat4 inMatrix) {
    vec4 i0 = inMatrix[0];
    vec4 i1 = inMatrix[1];
    vec4 i2 = inMatrix[2];
    vec4 i3 = inMatrix[3];

    mat4 outMatrix = mat4(
                 vec4(i0.x, i1.x, i2.x, i3.x),
                 vec4(i0.y, i1.y, i2.y, i3.y),
                 vec4(i0.z, i1.z, i2.z, i3.z),
                 vec4(i0.w, i1.w, i2.w, i3.w)
                 );

    return outMatrix;
}
mat4 inverse(mat4 m) {
  float
      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],
      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],
      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],
      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],

      b00 = a00 * a11 - a01 * a10,
      b01 = a00 * a12 - a02 * a10,
      b02 = a00 * a13 - a03 * a10,
      b03 = a01 * a12 - a02 * a11,
      b04 = a01 * a13 - a03 * a11,
      b05 = a02 * a13 - a03 * a12,
      b06 = a20 * a31 - a21 * a30,
      b07 = a20 * a32 - a22 * a30,
      b08 = a20 * a33 - a23 * a30,
      b09 = a21 * a32 - a22 * a31,
      b10 = a21 * a33 - a23 * a31,
      b11 = a22 * a33 - a23 * a32,

      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  return mat4(
      a11 * b11 - a12 * b10 + a13 * b09,
      a02 * b10 - a01 * b11 - a03 * b09,
      a31 * b05 - a32 * b04 + a33 * b03,
      a22 * b04 - a21 * b05 - a23 * b03,
      a12 * b08 - a10 * b11 - a13 * b07,
      a00 * b11 - a02 * b08 + a03 * b07,
      a32 * b02 - a30 * b05 - a33 * b01,
      a20 * b05 - a22 * b02 + a23 * b01,
      a10 * b10 - a11 * b08 + a13 * b06,
      a01 * b08 - a00 * b10 - a03 * b06,
      a30 * b04 - a31 * b02 + a33 * b00,
      a21 * b02 - a20 * b04 - a23 * b00,
      a11 * b07 - a10 * b09 - a12 * b06,
      a00 * b09 - a01 * b07 + a02 * b06,
      a31 * b01 - a30 * b03 - a32 * b00,
      a20 * b03 - a21 * b01 + a22 * b00) / det;
}

vec3 unpackNormal(vec4 packednormal)
{
	return packednormal.xyz * 2.0 - 1.0;
}

mat3 cotangentFrame(vec3 N, vec3 p, vec2 uv) { 
vec3 dp1 = dFdx(p); 
vec3 dp2 = dFdy(p); 
vec2 duv1 = dFdx(uv); 
vec2 duv2 = dFdy(uv);  
vec3 dp2perp = cross(dp2, N); 
vec3 dp1perp = cross(N, dp1); 
vec3 T = dp2perp * duv1.x + dp1perp * duv2.x; 
vec3 B = dp2perp * duv1.y + dp1perp * duv2.y; 
float invmax = 1.0 / sqrt(max(dot(T,T), dot(B,B))); 
return mat3(T * invmax, B * invmax, N); 
}

		//	#define M_PI 10.1415926535897932384626433832795
      float M_PI= 3.1445926;
			float dotClamped(vec3 a, vec3 b) {
				return max(dot(a,b), 0.0);
			}

			float F(float f0, vec3 l, vec3 h) {
				float LoH = dot(l,h);
				float powTerm = (-5.55473 * LoH - 6.98316) * LoH;
				return f0 + (1.0 - f0) * pow(2.0, powTerm);
				//return f0 + (1.0-f0) * pow(1.0-dot(l,h),5.0);
			}

		
			float N(float a, vec3 n, vec3 h, float NoH) {
				float a2 = a*a;
				float powTerm = 2.0 / a2 - 2.0;
				return (1.0 / (4.0 * a2)) * (pow(NoH, powTerm));
			}
		
			float G(float a, vec3 l, vec3 v, vec3 h, vec3 n, float NoL, float NoV) {
				float VdotH = max(dot(v,h), 0.0);
				float NdotH = max(dot(n,h), 0.0);
				float minV = 2.0 * NdotH * min(NoV, NoL) / VdotH;
				return min(1.0, minV);
			}
		
			float random(vec3 scale, float seed) {
				return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);
			}

			vec2 RandomSamples(float seed) {
				float u = random(vec3(12.9898, 78.233, 151.7182), seed);
				float v = random(vec3(63.7264, 10.873, 623.6736), seed);
				return vec2(u, v);
			}

			vec3 ImportanceSampleGGX( vec2 Xi, float Roughness, vec3 N ) {
				float a = Roughness * Roughness;
				float Phi = 2.0 * M_PI * Xi.x;
				float CosTheta = sqrt( (1.0 - Xi.y) / ( 1.0 + (a*a - 1.0) * Xi.y ) );
				float SinTheta = sqrt( 1.0 - CosTheta * CosTheta );
				vec3 H;
				H.x = SinTheta * cos( Phi );
				H.y = SinTheta * sin( Phi );
				H.z = CosTheta;
				return H;
			}


			vec3 SpecularIBL( float Roughness, vec3 NL, vec3 V, float fresnel )
			{
				//L: viewLightDir
				//H: halfVector
				//V: viewNormal
				//V: viewDir
				vec3 SpecularLighting = vec3(1.0);
				const int NumSamples = 32;
				for( int i = 0; i < NumSamples; i++ )
				{
					vec2 Xi = RandomSamples( u_time + float(i) );
					vec3 H = ImportanceSampleGGX( Xi, Roughness, NL );
					vec3 L = 2.0 * dot( V, H ) * H - V;
					float NoV = max( dot( NL, V ), 0.0 );
					float NoL = max( dot( NL, L ), 0.0 );
					float NoH = max( dot( NL, H ), 0.0 );
					float VoH = max( dot( V, H ), 0.0 );
					if( NoL > 0.0 )
					{
            // sampler cube
  						vec3 SampleColor = vec3(1.0,0.8,0.8);

  						float fresnel_fn = F(fresnel, L, H);
  						/*Put M_PI/4.0 in to NDF functions*/
  						float ndf_fn = N(Roughness, NL, H, NoH);
  						/*Put /(NoL*NoV) in G funtion*/
  						float g_fn = G(Roughness, L, V, H, NL, NoL, NoV);
  						SpecularLighting += fresnel_fn * ndf_fn * g_fn * SampleColor;
					}
				}
				return SpecularLighting / float(NumSamples);
			}


			vec3 dirDiffuse = vec3(0.0);
			vec3 dirSpecular = vec3(0.0);

			void calDirLight(vec3 lDir, vec3 normal, vec3 diffuse, vec3 specular) {

				vec3 dirLightColor = vec3(1.0);

				vec4 lDirection = uniform_ViewMatrix * vec4( lDir, 0.0 );
				vec3 dirVector = normalize( lDirection.xyz );

				float dirDiffuseWeight = max(dot( normal, dirVector ), 0.0);

				dirDiffuse += diffuse * dirLightColor * dirDiffuseWeight * 0.5;
       
				vec3 dirHalfVector = normalize( dirVector + vViewPosition );
				float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );
				float dirSpecularWeight = 0.5 * max( pow( dirDotNormalHalf, 0.0 ), 0.0 );

				float specularNormalization = ( 0.0 + 2.0 ) / 8.0;

				vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );
				dirSpecular += schlick * dirLightColor * dirSpecularWeight * dirDiffuseWeight * specularNormalization;

			}

// uniform sampler2D albedoTex; 
// uniform sampler2D normalTex; 
// uniform sampler2D glossTex; 
// uniform sampler2D specularTex; 
// uniform sampler2D opacityTex; 
mat4 normalMatrix;  
mat3 TBN;
vec3 normalTexColor;
			void main()	{
        
        vec4 albedoTexColor = texture2D(albedoTex,varying_uv0);
       // u_diffuseColor = albedoTexColor.xyz;
        //vec4 normaTexColor = texture2D(normalTex,varying_uv0);
        vec4 glossTexColor = texture2D(glossTex,varying_uv0);
        vec4 specularTexColor = texture2D(specularTex,varying_uv0);
        
          //normalMatrix
       normalMatrix = inverse(uniform_ViewMatrix);
       normalMatrix = transpose(normalMatrix);
       //TBN
       TBN = cotangentFrame(normalize(varying_eyeNormal.xyz), normalize(-varying_mvPose.xyz) , varying_uv0); 
       //sampler2D
       normalTexColor = unpackNormal(texture2D(normalTex, varying_uv0 )) ; 

        
				vec3 viewPosition = normalize(varying_mvPose.xyz);
 				vec4 viewLightPos = uniform_ViewMatrix * vec4( u_lightPos, 1.0 );
          
 				vec3 viewLightDir = viewLightPos.xyz - viewPosition.xyz;
				viewLightDir = normalize(viewLightDir);
   			vec3 viewNormal = normalize(normalTexColor.xyz);
         // gl_FragColor= vec4(viewNormal.xyz,1.0);//

   			vec3 viewDir = normalize(varying_mvPose.xyz/varying_mvPose.w); 
 				vec3 halfVec = normalize(viewDir + viewLightDir);
 				float diffuse = max(dot(normalize(viewLightPos.xyz), normalTexColor.xyz ), 0.0);
        
   			float NoL= max(dot(viewNormal, viewLightDir), 0.0);

      


  				float fresnel = pow((1.0 - specularTexColor.g) / (1.0 + specularTexColor.g), 2.0);
  				float fresnel_fn = F(fresnel, viewLightDir, halfVec);

  				vec3 specularColor = SpecularIBL(0.1, viewNormal.xyz, viewDir, fresnel) ;

  				vec3 specColor = specularColor * NoL + dirSpecular;
          //gl_FragColor = vec4(specularColor,1.0);
        
  				vec3 diffuseColor = u_diffuseColor * diffuse * (1.0 - fresnel_fn) * u_lightColor + dirDiffuse;

   				gl_FragColor = vec4( diffuseColor + specColor + u_ambientColor * u_diffuseColor, 1.0);
			}
		